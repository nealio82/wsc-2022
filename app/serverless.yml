service: scratch-dot-com

custom:
    dbUsername: 'SZaJ1DJKDcACk1y1' # should really use secrets manager for this
    dbPassword: 'Lo1okFQg0Ox4ufTe2X4M' # should really use secrets manager for this
    dbName: 'scratch_dot_com' # should really use secrets manager for this
    assetsBucketName: assets.scratch-dot-com
    sessionsTableName: scratch-dot-com-sessions
    messageQueueName: scratch-dot-com-messages

    s3Sync:
      # A simple configuration for copying static assets
      - bucketName: ${self:custom.assetsBucketName}
        localDir: public/build

provider:
    name: aws
    region: eu-west-1
    runtime: provided.al2
    environment:
        APP_ENV: prod
        ASSETS_BASE_URL: 'https://s3-eu-west-1.amazonaws.com/${self:custom.assetsBucketName}'
        ASSETS_BUCKET_NAME: ${self:custom.assetsBucketName}
        DATABASE_URL:
            !Sub
            - 'mysql://${self:custom.dbUsername}:${self:custom.dbPassword}@${DB_ENDPOINT}:3306/${self:custom.dbName}?serverVersion=5.7&charset=utf8mb4'
            - { DB_ENDPOINT: !GetAtt 'RDSCluster.Endpoint.Address' }
        SESSIONS_TABLE_NAME: ${self:custom.sessionsTableName}
        # We can't use AWS_REGION or AWS_DEFAULT_REGION because those are reserved keys
        AWS_STACK_REGION: ${self:provider.region}
        DYNAMO_DB_ENDPOINT: 'https://dynamodb.${self:provider.region}.amazonaws.com'
        MESSENGER_TRANSPORT_DSN: !Ref MessageQueue

    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                    - 'dynamodb:CreateTable'
                    - 'dynamodb:DeleteItem'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:UpdateItem'
                    - 'dynamodb:UpdateTimeToLive'
                  Resource: 'arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.sessionsTableName}'
                - Effect: Allow
                  Action:
                    - 's3:GetObject'
                    - 's3:PutObject'
                  Resource:
                    - 'arn:aws:s3:::${self:custom.assetsBucketName}/*'
                - Effect: Allow
                  Action:
                    - 'sqs:*'
                  Resource:
                    - 'arn:aws:sqs:${self:provider.region}:${aws:accountId}:${self:custom.messageQueueName}'

    vpc:
        securityGroupIds:
            - !GetAtt ServerlessSecurityGroup.GroupId
        subnetIds:
            - !Ref ServerlessSubnetA
            - !Ref ServerlessSubnetB
            - !Ref ServerlessSubnetC

plugins:
  - ./vendor/bref/bref
  - serverless-s3-sync

functions:
    web: # don't forget to change this from the default 'api'
        handler: public/index.php # point to the Symfony front controller
        description: ''
        timeout: 60
        url: true # let's use a Lambda function URL so we always get the same URL, and better execution limits
        layers:
            - ${bref:layer.php-81-fpm}

    console:
        handler: bin/console # or 'artisan' for Laravel
        timeout: 600
        layers:
            - ${bref:layer.php-81} # PHP runtime
            - ${bref:layer.console} # Console layer

    queue-worker:
      handler: bin/consumer.php
      timeout: 20 # in seconds
      reservedConcurrency: 5 # max. 5 messages processed in parallel
      layers:
        - ${bref:layer.php-81}
      events:
        # Read more at https://www.serverless.com/framework/docs/providers/aws/events/sqs/
        - sqs:
            arn: arn:aws:sqs:${self:provider.region}:${aws:accountId}:${self:custom.messageQueueName}
            # Only 1 item at a time to simplify error handling
            batchSize: 1

resources:
    - ${file(./serverless-config/network-resources.yml)}
    - ${file(./serverless-config/database-resources.yml)}
    - ${file(./serverless-config/s3-assets-resources.yml)}
    - ${file(./serverless-config/dynamodb-resources.yml)}
    - ${file(./serverless-config/sqs-resources.yml)}

# Exclude files from deployment
package:
    patterns:
        - '!node_modules/**'
        - '!tests/**'
